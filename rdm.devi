# Distributed Ledger Technologies / Blockchain : Software Design Patterns


Written conform to the [principles and terminology](principles_terms.md) of Blockchain.

## Data Patterns

### Merkle Tree

#### Structure
```uml
[<package>Merkle Tree |
	[Node |
		signature
		children
		|
		hash(string)
		toString()
	]children o-[Node]
	[Node]o-[DataBlock]
]

```

#### Instance

```uml
[<package>Merkle Tree |
	[<instance>datablock 1]->[<instance>node 1.1.1]
	[<instance>datablock 2]->[<instance>node 1.1.2]
	[<instance>datablock 3]->[<instance>node 1.2.1]
	[<instance>datablock 4]->[<instance>node 1.2.2]
	[<instance>node 1.1.1 | signature]->[<instance>node 1.1| signature]
	[<instance>node 1.1.2| signature]->[node 1.1]
	[<instance>node 1.2.1| signature]->[<instance>node 1.2| signature]
	[<instance>node 1.2.2| signature]->[node 1.2]
	[node 1.2]->[<instance>node 1| signature]
	[node 1.1]->[node 1]

]

```

Where node[1.1].signature = hash(concatenate(node[1.1.1].toString(),node[1.1.2].toString())))
etc.

#### Applications
+ Git
+ Modern File Systems

### Merkle Trie / Blockchain

#### Structure
```uml
[<package>Merkle Trie |
	[Node |
		signature
		block
		parent
		|
		hash(string)
		toString()
	]parent o-[Node]
	[Node]blocko-[DataBlock]
]

```

#### Instance

```uml

[<package>Merkle Trie |
	[...]->[<instance>root n | signature]
	[<instance>block n | signature]->[root n]
	[root n]->[<instance>root n+1 | signature]
	[<instance>block n+1 | signature]->[root n+1]
	[root n+1]->[<instance>root n+2 | signature]
	[<instance>block n+2 | signature]->[root n+2]
	[root n+2]->[....]

]

```

Where root[i+1].signature = hash(concatenate(root[i].toString(),block[i].toString()))
etc.

#### Applications
+ Blockchain

### Block

```uml
[<package>Block |

[Block |
	header: BlockHeader
	transactions: CountableList(Transaction)
	uncles: CountableList(BlockHeader)
	db = None
    	bloom_filter = None
		transaction_class = FrontierTransaction
		|
		__init__(header, db, transactions=None, uncles=None)
		validate_gas_limit()
		validate()
		validate_uncle(uncle)
		number()
		hash()
		get_parent_header()
		get_transaction_class(cls)
		get_cumulative_gas_used()
		receipts()
		from_header(cls, header, db)
		add_transaction(transaction, computation)
		add_uncle(uncle)
		mine(**kwargs)
	

]

[Block]transactions o-[Transaction]
[Block]header o-[BlockHeader]

[rlp.Serializable]<:-[Block]
[rlp.Serializable]<:-[BlockHeader]
        [BlockHeader |
            parent_hash: hash32
			uncles_hash: hash32
			coinbase: address
			state_root: trie_root
			transaction_root: trie_root
			receipt_root: trie_root
			bloom: int256
			difficulty: big_endian_int
			block_number: big_endian_int
			gas_limit: big_endian_int
			gas_used: big_endian_int
			timestamp: big_endian_int
			extra_data: binary
			mix_hash: binary
			nonce: Binary(8, allow_empty=True)
            |
            __init__(difficulty, block_number, gas_limit, 
				timestamp=None, coinbase=ZERO_ADDRESS, parent_hash=ZERO_HASH32, 
				uncles_hash=EMPTY_UNCLE_HASH, state_root=BLANK_ROOT_HASH, transaction_root=BLANK_ROOT_HASH, 
				receipt_root=BLANK_ROOT_HASH, bloom=0, gas_used=0, 
				extra_data=b'', mix_hash=ZERO_HASH32, nonce=GENESIS_NONCE)
            hash()
            mining_hash()
            hex_hash()
            from_parent(cls, parent, gas_limit, difficulty, coinbase=ZERO_ADDRESS, 
			timestamp=None, nonce=None, extra_data=None)
        ]
]
		
```


#### Applications
+ Blockchain

### Transaction

```uml
[<package>Transaction |
[Block |transactions|]o-transactions[Transaction |
	nonce: g_endian_int
	gas_price: big_endian_int
	gas: big_endian_int
	to: address
	value: big_endian_int
	data: binary
	v: big_endian_int
	r: big_endian_int
	s: big_endian_int
		|
		validate()
		check_signature_validity()
		get_sender()
		get_intrensic_gas()
		as_unsigned_transaction()
		create_unsigned_transaction(cls, nonce, gas_price, gas, to, value, data)
	]

]

```

#### Applications
+ Blockchain

## Behavior Patterns

### Singleton

```uml

[<package> Singleton |
	[<state>Network |
		blocks
		
	]-->[Singleton/Virtual Machine |
		interpreter
		state
	]

]


```

One single instance of:
+ data
+ behavior
+ events

#### Applications
+ Blockchain

### (Smart) Contract

```uml

[<package> Contract |
	[<state>Network |
		blocks
	]o-blocks[Block]
	[Block]o-contracts[Contract |
	
	owner: Address
	|
	Contract() // constructor
	]
	

]


```

#### Mortal Contract

By default the contracts are immortal. They could trap funds if they cannot be stopped from operation.


```uml

[<package> Mortal Contract |
	
	[<abstract>Contract]<:-[<abstract>Mortal |
		owner: Address
		|
		Mortal()
		Kill()
	]
	[Mortal]<:-[ConcreteMortal||]
]


```

### Contract Interoperativity

```uml

[<package> Contract Interoperativity|
	[<abstract>ERC20Interface |
		|
		totalSupply() constant returns (uint totalSupply)
		balanceOf(address _owner) constant returns (uint balance)
		transfer(address _to, uint _value) returns (bool success)
		transferFrom(address _from, address _to, uint _value) returns (bool success)
		approve(address _spender, uint _value) returns (bool success)
		allowance(address _owner, address _spender) constant returns (uint remaining)
		|
 		Transfer(address indexed _from, address indexed _to, uint _value)
		Approval(address indexed _owner, address indexed _spender, uint _value)
		
	]
	[ERC20Interface]<:-[Contract1 ||]
	[ERC20Interface]<:-[Contract2 ||]
	
	[ERC20Interface]<:-[<abstract>HumanStandardToken |
		+name: string
		+decimals: uint8
		+symbol: string
		+version = 'H0.1'
	]
	
	[HumanStandardToken]<:-[Contract3 ||]
	

]
```
Contract1, 2, 3 are interoperable

### Oracle

Stores trusted information onto the blockchain.

```uml
[<package>Oracle |
	
	
	[<abstract>Contract||]<:-[OracleConnector|
		notary
		data
		|
		query(URL)
		saveData(signed_data)
	]
	[OracleConnector]-->[<state>TLSNotary |
		signature
		timestamp
		
		| verify()
		query(URL)
		signResult()
		]
	
	


]
```


### Observer/Judge

#### Structure

```uml
[<package>Observer |
	
	
	[<abstract>Contract||]<:-[ObservedContract|
		deadline: uint
		value: uint
		role1: Address
		role2: Address
		observer: Address
		status: uint
		|
		observe()
		|
		event: statusChange
	]
	[ObservedContract]-->[<abstract>Observer |
		
		|
		notify(Address)
		]
		
	[Observer]<:-[AutomatedObserver]
	[Observer]<:-[HumanObserverInterface]
	[HumanObserverInterface]->[<actor>Human]
	

]
```

#### Usage


```sequence

Role1 -> Contract: create \n (Role2, Observer, ETH value)
Contract -> Role2: create role
Contract -> Observer: create observer
Role2 -> Contract: status change
Contract -> Observer: notify(status change)
Role1 -> Contract: status change
Contract -> Observer: notify(status change)



Observer -> Contract: provide resolution
Contract -> Role1: dispatch resolution
Note left of Role1: END
Contract -> Role2: dispatch resolution
Note left of Role2: END



```

A more detailed UML and implementation: [ontrack-dapp](https://github.com/loredanacirstea/ontrack-dapp)

## Composite Patterns

### Twin Contracts

Twin smart contracts usually are born and die together. Also the transcations they initiate are born in synchronicity and atomically in mirror on their respective newtorks.

```uml
[<package>Twin Contracts |
	
	[<abstract>TwinInterface1|twins: CountableList(Contract)|]
	[<state>NetworkA]-->[ContractTwin1A|twins]
	[<state>NetworkB]-->[ContractTwin1B|twins]
	[TwinInterface1]<:-[ContractTwin1A]
	[TwinInterface1]<:-[ContractTwin1B]
	[ContractTwin1B]--knows[ContractTwin1A]


]


```

### Contract Factory

```uml
[<package>Contract Factory |
	
	[<state>ContractFactory |
		param1
		param2
		contracts: CountableList(Contract)
		
		| 
		setParam(data)
		createContract()
		]o-contracts[ConcreteContract1||]
		

]


```

### Contract of Contracts

A contract that implements contract factory for any number of contracts.



## Thanks
Diagrams drawn using [Nomnoml](http://nomnoml.com/) and [JS Sequence Diagrams](https://bramp.github.io/js-sequence-diagrams/).

```uml
http://orobo.go.ro:5500/info.txt
```